name: build

on:
  workflow_call:
    inputs:
      build_mode:
        required: true
        type: string
        default: "release"
      upload_artifacts:
        required: false
        type: boolean
        default: true

env:
  PYTHON_VERSION: 3.13
  CMAKE_VERSION: 4.0.2

jobs:
  build:
    name: Build for ${{ matrix.target_platform }} (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target_platform: linux
            shell: bash
            cc: clang
            cxx: clang++
            llvm_version: "21"
          - os: windows-latest
            target_platform: windows
            shell: pwsh
            cc: clang-cl
            cxx: clang-cl
            llvm_version: "20.1.4"
          - os: macos-latest
            target_platform: darwin
            shell: bash
            cc: clang
            cxx: clang++
            llvm_version: "19"
          - os: ubuntu-latest
            target_platform: mingw
            shell: bash
            cc: x86_64-w64-mingw32-clang
            cxx: x86_64-w64-mingw32-clang++
            llvm_version: "21"

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
  
    env:
      EXTRA_ARGS: |
        -DENABLE_XRAY=false,-DENABLE_SANITIZERS=false,-DENABLE_BUILD_REPORT=false,-DENABLE_LTO=true,-DENABLE_NATIVE_ARCH=true,-DENABLE_LLVM_UNWIND=true,-DENABLE_VERBOSE=true,-DENABLE_COVERAGE=false,-DENABLE_WARNINGS_AS_ERRORS=false,-DENABLE_BUILD_SHARED=false,-DENABLE_BUILD_PROGRAM=true,-DENABLE_BUILD_BENCHMARK=false,-DENABLE_BUILD_TESTING=false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y \
            wget \
            curl \
            gnupg \
            lsb-release \
            software-properties-common \
            ca-certificates \
            git \
            ninja-build

          # Install CMake
          CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh"
          wget -nv "${CMAKE_URL}" -O cmake-installer.sh
          chmod +x cmake-installer.sh
          sudo ./cmake-installer.sh --skip-license --prefix=/usr/local
          rm cmake-installer.sh

          # Install LLVM
          wget -O llvm.sh https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ matrix.llvm_version }} all
          rm llvm.sh

          sudo apt-get install -y libunwind-${{ matrix.llvm_version }}-dev

          # Set up alternatives
          for bin in clang clang++ clang-tidy clang-format llvm-ar FileCheck; do
            sudo update-alternatives --remove-all "$bin" 2>/dev/null || true
          done

          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ matrix.llvm_version }} 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{ matrix.llvm_version }} 100
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-${{ matrix.llvm_version }} 100
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-${{ matrix.llvm_version }} 100
          sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-${{ matrix.llvm_version }} 100
          sudo update-alternatives --install /usr/bin/llvm-nm llvm-nm /usr/bin/llvm-nm-${{ matrix.llvm_version }} 100
          sudo update-alternatives --install /usr/bin/llvm-ranlib llvm-ranlib /usr/bin/llvm-ranlib-${{ matrix.llvm_version }} 100
          sudo update-alternatives --install /usr/bin/FileCheck FileCheck /usr/bin/FileCheck-${{ matrix.llvm_version }} 100

          sudo update-alternatives --set clang /usr/bin/clang-${{ matrix.llvm_version }}
          sudo update-alternatives --set clang++ /usr/bin/clang++-${{ matrix.llvm_version }}
          sudo update-alternatives --set clang-tidy /usr/bin/clang-tidy-${{ matrix.llvm_version }}
          sudo update-alternatives --set clang-format /usr/bin/clang-format-${{ matrix.llvm_version }}
          sudo update-alternatives --set llvm-ar /usr/bin/llvm-ar-${{ matrix.llvm_version }}
          sudo update-alternatives --set llvm-nm /usr/bin/llvm-nm-${{ matrix.llvm_version }}
          sudo update-alternatives --set llvm-ranlib /usr/bin/llvm-ranlib-${{ matrix.llvm_version }}
          sudo update-alternatives --set FileCheck /usr/bin/FileCheck-${{ matrix.llvm_version }}

          clang --version
          clang++ --version
          clang-tidy --version
          clang-format --version
          llvm-ar --version
          llvm-nm --version
          llvm-ranlib --version
          FileCheck --version

      - name: Install dependencies (MinGW)
        if: matrix.target_platform == 'mingw'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update && sudo apt-get install -y nsis wine wine32
          source ./src/build/scripts/install_llvm_mingw.sh
          echo "LLVM_MINGW_DIR=${LLVM_MINGW_DIR}" >> $GITHUB_ENV
          echo "LLVM_MINGW_DIR resolved to: ${LLVM_MINGW_DIR}"

      - name: Install dependencies (Windows)
        if: matrix.target_platform == 'windows'
        run: |
          choco install --no-progress cmake --version=${{ env.CMAKE_VERSION }} --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install --no-progress llvm --version=${{ matrix.llvm_version }} -y
          choco install --no-progress nsis wixtoolset ninja -y

      - name: Install dependencies (MacOS)
        if: matrix.target_platform == 'darwin'
        run: |
          # xcode-select --install

          brew update
          brew install --formula cmake yasm nasm llvm@${{ matrix.llvm_version }} lld@${{ matrix.llvm_version }}

          LLVM_PREFIX=$(brew --prefix llvm@${{ matrix.llvm_version }})
          echo "LLVM_BIN=${LLVM_PREFIX}/bin" >> $GITHUB_ENV
          echo "PATH=${LLVM_PREFIX}/bin:$PATH" >> $GITHUB_ENV
          export PATH="${LLVM_PREFIX}/bin:$PATH"

          LLD_PREFIX=$(brew --prefix lld@${{ matrix.llvm_version }})
          echo "LLD_BIN=${LLD_PREFIX}/bin" >> $GITHUB_ENV
          echo "PATH=${LLD_PREFIX}/bin:$PATH" >> $GITHUB_ENV
          export PATH="${LLD_PREFIX}/bin:$PATH"
      
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          if [ -f "src/build/scripts/requirements.txt" ]; then
            python3 -m pip install -r src/build/scripts/requirements.txt
          fi
        shell: bash

      - name: Run build script (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          python3 -u src/build/scripts/build.py \
            --build_mode=${{ inputs.build_mode }} \
            --target_platform=${{ matrix.target_platform }} \
            --no-install \
            --package \
            --cpplint \
            --no-clang_format \
            --extra_args="${{ env.EXTRA_ARGS }}"

      - name: Run build script (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          call "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > path.txt
          set /p InstallPath=<path.txt
          call "%InstallPath%\VC\Auxiliary\Build\vcvarsall.bat" x64
          set BUILD_CMD=python3 -u src/build/scripts/build.py --build_mode=${{ inputs.build_mode }} --target_platform=${{ matrix.target_platform }} --no-install --package --cpplint --no-clang_format --extra_args="${{ env.EXTRA_ARGS }}"
          call %BUILD_CMD%

      - name: Upload ${{ inputs.build_mode }} artifacts
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          ACTIONS_ARTIFACT_UPLOAD_CONCURRENCY: 5
        with:
          name: builds-${{ matrix.target_platform }}-${{ inputs.build_mode }}
          path: |
            out/package/*/*.deb
            out/package/*/*.tar.gz
            out/package/*/*.exe
            out/package/*/*.zip
            out/package/*/*.msi
            out/package/*/*.dmg
            out/package/*/*.pkg
          retention-days: 3
          if-no-files-found: warn

  summary:
    name: Summarize builds
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ inputs.upload_artifacts }}
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download all ${{ inputs.build_mode }} artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: builds-*-${{ inputs.build_mode }}
          path: ./artifacts/
        continue-on-error: true

      - name: Show artifacts tree
        run: |
          if [ -d "./artifacts" ]; then
            tree ./artifacts || ls -la ./artifacts
          else
            echo "No artifacts found"
          fi

      - name: Generate build summary
        run: |
          python3 .github/workflows/scripts/summarize.py artifacts > summary.md
          cat summary.md >> $GITHUB_STEP_SUMMARY
