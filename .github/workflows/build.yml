name: build

on:
  workflow_call:
    inputs:
      build_mode:
        required: true
        type: string
        default: "release"
      upload_artifacts:
        required: false
        type: boolean
        default: true

env:
  PYTHON_VERSION: "3.13"
  CMAKE_VERSION: "4.0.2"

jobs:
  build:
    name: Build for ${{ matrix.target_platform }} (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target_platform: linux
            cc: clang
            cxx: clang++
            llvm_version: "20"
          - os: windows-latest
            target_platform: windows
            cc: clang-cl
            cxx: clang-cl
            llvm_version: "20.1.4"
          - os: macos-latest
            target_platform: darwin
            cc: clang
            cxx: clang++
            llvm_version: "19"
          - os: ubuntu-latest
            target_platform: mingw
            cc: x86_64-w64-mingw32-clang
            cxx: x86_64-w64-mingw32-clang++
            llvm_version: "20"

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          case "${{ matrix.target_platform }}" in
            linux)
              sudo apt-get update && sudo apt-get install -y wget curl ninja-build libunwind-${{ matrix.llvm_version }}-dev
              # Install CMake
              wget -qO- "https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.sh" | sudo bash -s -- --skip-license --prefix=/usr/local
              # Install LLVM
              wget -qOllvm.sh https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && sudo ./llvm.sh ${{ matrix.llvm_version }} all
              # Setup alternatives (simplified)
              for tool in clang clang++ clang-tidy clang-format llvm-ar llvm-nm llvm-ranlib FileCheck; do
                sudo update-alternatives --install /usr/bin/$tool $tool /usr/bin/$tool-${{ matrix.llvm_version }} 100
              done
              ;;
            mingw)
              sudo apt-get update && sudo apt-get install -y nsis wine
              source ./src/build/scripts/install_llvm_mingw.sh
              echo "LLVM_MINGW_DIR=${LLVM_MINGW_DIR}" >> $GITHUB_ENV
              ;;
            windows)
              choco install -y cmake --version=${{ env.CMAKE_VERSION }} llvm --version=${{ matrix.llvm_version }} nsis ninja
              ;;
            darwin)
              brew update && brew install cmake llvm@${{ matrix.llvm_version }} lld@${{ matrix.llvm_version }}
              echo "$(brew --prefix llvm@${{ matrix.llvm_version }})/bin" >> $GITHUB_PATH
              echo "$(brew --prefix lld@${{ matrix.llvm_version }})/bin" >> $GITHUB_PATH
              ;;
          esac
        shell: bash

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          [ -f "src/build/scripts/requirements.txt" ] && python3 -m pip install -r src/build/scripts/requirements.txt || true
        shell: bash

      - name: Build
        run: |
          BUILD_ARGS="--build_mode=${{ inputs.build_mode }} --target_platform=${{ matrix.target_platform }} --no-install --package --cpplint --no-clang_format"
          EXTRA_ARGS="-DENABLE_XRAY=false,-DENABLE_SANITIZERS=false,-DENABLE_BUILD_REPORT=false,-DENABLE_LTO=true,-DENABLE_NATIVE_ARCH=true,-DENABLE_LLVM_UNWIND=true,-DENABLE_VERBOSE=true,-DENABLE_COVERAGE=false,-DENABLE_WARNINGS_AS_ERRORS=false,-DENABLE_BUILD_SHARED=false,-DENABLE_BUILD_PROGRAM=true,-DENABLE_BUILD_BENCHMARK=false,-DENABLE_BUILD_TESTING=false"
          
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Setup MSVC environment for Windows
            eval "$(vswhere.exe -latest -products \* -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath | sed 's|.*|"&/VC/Auxiliary/Build/vcvarsall.bat" x64|')"
          fi
          
          python3 -u src/build/scripts/build.py $BUILD_ARGS --extra_args="$EXTRA_ARGS"
        shell: bash

      - name: Upload artifacts
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: builds-${{ matrix.target_platform }}-${{ inputs.build_mode }}
          path: out/package/*/*.*
          retention-days: 3
          if-no-files-found: warn

  summary:
    if: ${{ inputs.upload_artifacts }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - uses: actions/download-artifact@v4
        with:
          pattern: builds-*-${{ inputs.build_mode }}
          path: ./artifacts/
        continue-on-error: true

      - name: Generate summary
        run: |
          [ -d "./artifacts" ] && (tree ./artifacts || ls -la ./artifacts) || echo "No artifacts found"
          python3 .github/workflows/scripts/summarize.py artifacts >> $GITHUB_STEP_SUMMARY