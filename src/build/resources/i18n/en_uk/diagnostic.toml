unknown = "unknown"
ok = "ok"

[severity]
trace = "trace"
debug = "debug"
info = "info"
warn = "warn"
error = "error"
fatal = "fatal"

[lexer]
file_not_found = "file not found"
file_charset_invalid = "file charset invalid"
unterminated_string_literal = "unterminated string literal"
unterminated_character_literal = "unterminated character literal"
unterminated_block_comment = "unterminated block comment"
unrecognized_character = "unrecognized character"
invalid_escape_sequence = "invalid escape sequence"
invalid_utf_sequence = "invalid utf sequence"
invalid_numeric_literal = "invalid numeric literal"
unexpected_end_of_file = "unexpected end of file"

[parser]
invalid_token = "invalid token"
missing_token = "missing token"
unexpected_token = "unexpected token"
expected_but_found = "expected {}, but found {}"
unexpected_keyword = "unexpected keyword"
malformed_declaration = "malformed declaration"
duplicate_parameter_name = "duplicate parameter name"
parameter_count_mismatch = "parameter count mismatch"
invalid_function_call = "invalid function call"
invalid_assignment_target = "invalid assignment target"
invalid_generic_arguments = "invalid generic arguments"
break_outside_loop = "break outside loop"
continue_outside_loop = "continue outside loop"
invalid_pattern = "invalid pattern"
invalid_syntax = "invalid syntax"

[ast_analyze]
undefined_symbol = "undefined symbol"
undefined_variable = "undefined variable"
undefined_function = "undefined function"
undefined_type = "undefined type"
call_argument_mismatch = "call argument mismatch"
return_type_mismatch = "return type mismatch"
non_callable_expression = "non callable expression"
invalid_operator_operands = "invalid operator operands"
member_not_found = "member not found"
access_private_member = "access private member"
immutable_binding_changed = "immutable binding changed"
const_assignment = "const assignment"
type_mismatch = "type mismatch"
type_annotation_required = "type annotation required"
non_iterable_expression = "non iterable expression"
infinite_loop_literal = "infinite loop literal"
function_signature_mismatch = "function signature mismatch"
redeclaration = "redeclaration"
conflicting_declaration = "conflicting declaration"
conflicting_trait_implementation = "conflicting trait implementation"
missing_trait_bound = "missing trait bound"
variable_not_initialized = "variable not initialized"
misplaced_attribute = "misplaced attribute"
recursive_type_definition = "recursive type definition"
cyclic_dependency = "cyclic dependency"
numeric_literal_out_of_range = "numeric literal out of range"

[ir_analyze]
dangling_reference = "dangling reference"
unused_lifetime_parameter = "unused lifetime parameter"
unused_borrow = "unused borrow"
lifetime_conflict = "lifetime conflict"
lifetime_annotation_required = "lifetime annotation required"
returned_borrow_does_not_live_long_enough = "returned borrow does not live long enough"
moved_variable_that_was_still_borrowed = "moved variable that was still borrowed"
borrow_after_move = "borrow after move"
use_after_move = "use after move"
multiple_mutable_borrow = "multiple mutable borrow"
mutable_alias = "mutable alias"
immutable_borrow_into_mutable = "immutable borrow into mutable"

[warning]
unused_variable = "unused variable"
unused_function = "unused function"
unreachable_code = "unreachable code"
implicit_conversion = "implicit conversion"
missing_return_statement = "missing return statement"
deprecated_feature = "deprecated feature"
deprecated_api_usage = "deprecated api usage"
ambiguous_call = "ambiguous call"
unnecessary_copy = "unnecessary copy"
shadowing_variable = "shadowing variable"
numeric_division_by_zero = "numeric division by zero"
always_true_condition = "always true condition"
always_false_condition = "always false condition"
missing_default_case = "missing default case"
inefficient_loop = "inefficient loop"
redundant_cast = "redundant cast"
empty_loop_body = "empty loop body"
ineffective_assignment = "ineffective assignment"

[label]
use_of_undeclared_variable = "use of undeclared variable `{}`" # variable
expected_after = "expected {} after `{}`" # type, token
borrow_occurs_here = "borrow occurs here"
move_occurs_here = "move occurs here"
borrow_exits_scope_here = "borrow exits scope here"

[annotation]
was_not_declared_in_this_scope = "`{}` was not declared in this scope" # variable
moved_variable_that_was_still_borrowed = "`{}` was moved while borrowed" # variable
try_cloning_data = "try cloning `{}` if you need to use it after moving" # variable
did_you_mean = "did you mean `{}`?" # code
change_charset_to_utf8_and_try_again = "change charset of the file to utf-8 and try again"
